package com.hust.itss.domain;

import static com.hust.itss.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CommentsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentsAllPropertiesEquals(Comments expected, Comments actual) {
        assertCommentsAutoGeneratedPropertiesEquals(expected, actual);
        assertCommentsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentsAllUpdatablePropertiesEquals(Comments expected, Comments actual) {
        assertCommentsUpdatableFieldsEquals(expected, actual);
        assertCommentsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentsAutoGeneratedPropertiesEquals(Comments expected, Comments actual) {
        assertThat(expected)
            .as("Verify Comments auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentsUpdatableFieldsEquals(Comments expected, Comments actual) {
        assertThat(expected)
            .as("Verify Comments relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(e -> assertThat(e.getAnonymousId()).as("check anonymousId").isEqualTo(actual.getAnonymousId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentsUpdatableRelationshipsEquals(Comments expected, Comments actual) {
        assertThat(expected)
            .as("Verify Comments relationships")
            .satisfies(e -> assertThat(e.getDocument()).as("check document").isEqualTo(actual.getDocument()));
    }
}
